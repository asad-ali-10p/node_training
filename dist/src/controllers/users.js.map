{"version":3,"file":"users.js","sourceRoot":"","sources":["../../../src/controllers/users.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAA6C;AAG7C,oCAAoC;AAIpC,MAAM,SAAS,GAAG,SAAS,CAAC;AAEf,QAAA,MAAM,GAAG,CAAM,GAAY,EAAE,IAAgB,EAAE,EAAE;IAC1D,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;IACxC,MAAM,IAAI,EAAE,CAAC;AACjB,CAAC,CAAA,CAAA;AAEY,QAAA,OAAO,GAAG,CAAM,GAAY,EAAE,IAAgB,EAAE,EAAE;IAC3D,MAAM,OAAO,GAAiB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;IAC/C,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAChD,MAAM,IAAI,EAAE,CAAC;AACjB,CAAC,CAAA,CAAA;AAEY,QAAA,SAAS,GAAG,CAAM,GAAY,EAAE,IAAgB,EAAE,EAAE;IAC7D,MAAM,OAAO,GAAiB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;IAC/C,MAAM,QAAQ,GAAG,EAAE,CAAC;IAEpB,MAAM,KAAK,GAAY,MAAM,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACxD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QAClB,MAAM,IAAI,GAAU,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAClB,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EACtC,SAAS,EACT,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;QACR,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;KACtB;IACD,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC;IAC1B,MAAM,IAAI,EAAE,CAAC;AACjB,CAAC,CAAA,CAAA","sourcesContent":["import * as service from '../services/users';\nimport { Context } from 'koa';\nimport { IUserRequest } from '../interfaces/user';\nimport * as jwt from \"jsonwebtoken\";\nimport { Users } from '../entities/users';\nimport { string } from 'joi';\n\nconst jwtSecret = \"@QEGTUI\";\n\nexport const getAll = async(ctx: Context, next: () => void) => { \n    ctx.state.data = await service.getAll();\n    await next();\n}\n\nexport const addUser = async(ctx: Context, next: () => void) => { \n    const payload: IUserRequest = ctx.request.body;\n    ctx.state.data = await service.addUser(payload);\n    await next();\n}\n\nexport const loginUser = async(ctx: Context, next: () => void) => { \n    const payload: IUserRequest = ctx.request.body;\n    const jwtToken = \"\";\n    // ctx.state.data = await service.loginUser(payload);\n    const users: Users[] = await service.loginUser(payload);\n    if (users.length > 0) {\n        const user: Users = users[0];\n        const token = jwt.sign(\n            { userId: user.id, email: user.email },\n            jwtSecret,\n            { expiresIn: \"1h\" }\n          );\n    ctx.state.data = token;\n    }\n    ctx.state.data = jwtToken;\n    await next();\n}"]}